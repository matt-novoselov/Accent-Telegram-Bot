from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
import AccentWord
import os
import mysql_database
from aiogram.utils.deep_linking import get_start_link

load_dotenv()
bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot)

kb = [[types.KeyboardButton(text="üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton(text="üõ†Ô∏è –¢–µ—Ö–ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
      [types.KeyboardButton(text="üë™ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π")]]
keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="")  # Create keyboard


@dp.message_handler(text="üõ†Ô∏è –¢–µ—Ö–ü–æ–¥–¥–µ—Ä–∂–∫–∞")  # Run action after pressing keyboard
async def get_support(message: types.Message):
    await message.reply("üõ†Ô∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –¢–µ—Ö–ü–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: @NoveSupportBot")


@dp.message_handler(text="üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")  # Run action after pressing keyboard
async def get_top(message: types.Message):
    await message.reply(await mysql_database.get_stats(message.from_user.id), parse_mode="Markdown")


@dp.message_handler(text="üë™ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π")  # Run action after pressing keyboard
async def get_top(message: types.Message):
    link = await get_start_link(message.from_user.id)
    await message.reply(f'üéÅ *–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã!*\n\n–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –∑–Ω–∞–∫–æ–º—ã–º. –ï—Å–ª–∏ —Ç–≤–æ–π –¥—Ä—É–≥ '
                        f'–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —Ç–æ –∫–∞–∂–¥–æ–º—É –∏–∑ –≤–∞—Å –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è –ø–æ *+50 –±–∞–ª–ª–æ–≤!*', parse_mode="Markdown")
    await message.answer(link)


@dp.message_handler(commands=['start'])  # Run on /start command.
async def send_welcome(message: types.Message):
    await mysql_database.add_new_user_to_database(message.from_user.id, message['from']["first_name"],
                                                  message['from']["last_name"])  # Add new user to database
    args = message.get_args()
    if len(args) > 0:
        check_bonus = await mysql_database.CheckReferral(args, message.from_user.id)
        if check_bonus:
            await bot.send_message(message.from_user.id, 'üéÅ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ *50 –±–∞–ª–ª–æ–≤* –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!', parse_mode="Markdown")
            await bot.send_message(args, 'üéÅ –ö—Ç–æ-—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ. –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ *50 –±–∞–ª–ª–æ–≤!*', parse_mode="Markdown")

    await bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.full_name}!*" +
                           '\n\n–Ø - –±–æ—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ 4-–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ï–ì–≠.' +
                           "\n\n–ù–∞–∂–º–∏ –Ω–∞ —Å–ª–æ–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–µ—Ä–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —É–¥–∞—Ä–µ–Ω–∏–µ: ", parse_mode="Markdown",
                           reply_markup=keyboard)
    await send_game(message)


@dp.message_handler()
async def send_game(message: types.Message):
    try:
        await bot.send_message(message.chat.id, "üí¨ –ù–∞ –∫–∞–∫—É—é –±—É–∫–≤—É —Å—Ç–∞–≤–∏—Ç—Å—è —É–¥–∞—Ä–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å–ª–æ–≤–µ?", parse_mode="Markdown",
                           reply_markup=await AccentWord.GenerateAccents())
    except:
        print("[!] Failed to send a new game. Trying again...")
        await send_game(message)
        pass


@dp.callback_query_handler()
async def process_callback_button1(callback_query: types.CallbackQuery):
    data_set = callback_query.data.split("#")
    if data_set[0] == data_set[1]:
        user_score = await mysql_database.update_score(callback_query["message"]["chat"]["id"], +10)
        await callback_query["message"].edit_text(text=f"‚úÖ *{data_set[1]}*\n\n`+10` | –í–∞—à —Å—á—ë—Ç: `{user_score}`",
                                                  parse_mode="Markdown")
    else:
        print(
            f'[x] User {callback_query["message"]["chat"]["id"]} answered wrong {data_set[0]}. The correct answer is {data_set[1]}')
        user_score = await mysql_database.update_score(callback_query["message"]["chat"]["id"], -50)
        await callback_query["message"].edit_text(
            text=f"‚ùå –ó–∞–ø–æ–º–Ω–∏: *{data_set[1]}*\n\n`-50` | –í–∞—à —Å—á—ë—Ç: `{user_score}`",
            parse_mode="Markdown")
    await send_game(callback_query["message"])


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
